import logging
import random
import asyncio
import os
import time
from database import add_user, add_coins, get_balance
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# ЁЯФе .env ржлрж╛ржЗрж▓ рж▓рзЛржб ржХрж░рж╛
load_dotenv()

# тЬЕ BotFather ржерзЗржХрзЗ ржкрж╛ржУрзЯрж╛ API Token
TOKEN = os.getenv("TOKEN")

# тЬЕ Token ржирж╛ ржкрж╛ржУрзЯрж╛ ржЧрзЗрж▓рзЗ ржПрж░рж░ ржжрзЗржЦрж╛ржмрзЗ
if not TOKEN:
    raise ValueError("тЭМ TOKEN ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐! `.env` ржлрж╛ржЗрж▓рзЗ ржПржЯрж┐ рж╕рзЗржЯ ржХрж░рзЛред")

# тЬЕ Aiogram рж╕рзЗржЯржЖржк
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ЁЯФЧ рж░рзЗржлрж╛рж░рзЗрж▓ рж╕рж┐рж╕рзНржЯрзЗржо рж╕рзЗржЯржЖржк
user_referrals = {}
REFERRAL_BONUS = 100  # рж░рзЗржлрж╛рж░рзЗрж▓ ржмрзЛржирж╛рж╕ ржХрзЯрзЗржи

# ЁЯОб Spin & Win ржПржмржВ ЁЯОл Scratch & Win ржкрзБрж░рж╕рзНржХрж╛рж░ рждрж╛рж▓рж┐ржХрж╛
SPIN_REWARDS = ["10 Coins", "50 Coins", "100 Coins", "Better Luck Next Time!", "500 Coins", "Jackpot! 1000 Coins"]
SCRATCH_REWARDS = ["5 Coins", "20 Coins", "50 Coins", "No Win!", "200 Coins", "Lucky! 500 Coins"]

# ЁЯОо ржорзЗржирзБ ржХрзАржмрзЛрж░рзНржб
keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="ЁЯОб Spin & Win")],
    [KeyboardButton(text="ЁЯОл Scratch & Win")],
    [KeyboardButton(text="ЁЯОБ Daily Bonus")],
    [KeyboardButton(text="ЁЯФЧ Referral")],  # тЬЕ рж░рзЗржлрж╛рж░рзЗрж▓ ржмрж╛ржЯржи
    [KeyboardButton(text="ЁЯТ░ Check Balance")]
], resize_keyboard=True)

# ЁЯПж ржЗржЙржЬрж╛рж░рзЗрж░ ржмрзНржпрж╛рж▓рж╛ржирзНрж╕ рж╕ржВрж░ржХрзНрж╖ржг
user_balances = {}
last_bonus_claim = {}
BONUS_AMOUNT = 50  # ржкрзНрж░рждрж┐ржжрж┐ржи ржлрзНрж░рж┐ ржмрзЛржирж╛рж╕ ржХрзЯрзЗржи рж╕ржВржЦрзНржпрж╛

# тЬЕ ржЗржЙржЬрж╛рж░рзЗрж░ ржмрзНржпрж╛рж▓рж╛ржирзНрж╕ ржлрж╛ржВрж╢ржи
def get_balance(user_id):
    return user_balances.get(user_id, 0)

def add_coins(user_id, amount):
    user_balances[user_id] = get_balance(user_id) + amount

# ЁЯПБ `/start` ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id
    args = message.text.split()

    # ржЗржЙржЬрж╛рж░ ржбрж╛ржЯрж╛ржмрзЗрж╕рзЗ ржпрзЛржЧ ржХрж░рзЛ
    add_user(user_id)

    # тЬЕ ржпржжрж┐ ржЗржЙржЬрж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржВржХ ржжрж┐рзЯрзЗ ржЬрзЯрзЗржи ржХрж░рзЗ ржерж╛ржХрзЗ
    if len(args) > 1 and args[1].isdigit():
        referrer_id = int(args[1])
        if referrer_id != user_id and referrer_id not in user_referrals.get(user_id, []):  
            add_coins(referrer_id, REFERRAL_BONUS)
            user_referrals.setdefault(user_id, []).append(referrer_id)
            await bot.send_message(referrer_id, f"ЁЯОК ржЖржкржирж┐ ржирждрзБржи рж░рзЗржлрж╛рж░рзЗрж▓ ржкрзЗрзЯрзЗржЫрзЗржи ржПржмржВ {REFERRAL_BONUS} Coins ржЙржкрж╛рж░рзНржЬржи ржХрж░рзЗржЫрзЗржи!")

    # тЬЕ ржУрзЯрзЗрж▓ржХрж╛ржо ржорзНржпрж╛рж╕рзЗржЬ ржкрж╛ржарж╛ржУ
    welcome_text = f"ЁЯОЙ Welcome {message.from_user.first_name}!\nPlay and Win Rewards!\nChoose an option below:"
    await message.answer(welcome_text, reply_markup=keyboard)

# ЁЯФЧ `/referral` ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
@dp.message(Command("referral"))
async def referral_system(message: types.Message):
    user_id = message.from_user.id
    referral_link = f"https://t.me/@Spin4EarnBot?start={user_id}"
    await message.answer(f"ЁЯФЧ ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржВржХ:\n{referral_link}\n\nЁЯУв ржмржирзНржзрзБржжрзЗрж░ рж╢рзЗрзЯрж╛рж░ ржХрж░рзБржи ржПржмржВ ржкрзНрж░рждрж┐ржЯрж┐ ржирждрзБржи ржЗржЙржЬрж╛рж░рзЗрж░ ржЬржирзНржп {REFERRAL_BONUS} Coins ржЙржкрж╛рж░рзНржЬржи ржХрж░рзБржи!")

# ЁЯФЧ **рж░рзЗржлрж╛рж░рзЗрж▓ ржмрж╛ржЯржи ржкрзНрж░рзЗрж╕ ржХрж░рж▓рзЗ** ржПржХржЗ рждржерзНржп ржкрж╛ржарж╛ржмрзЗ
@dp.message(lambda message: message.text == "ЁЯФЧ Referral")
async def referral_button(message: types.Message):
    await referral_system(message)

# ЁЯОБ `/dailybonus` рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
@dp.message(Command("dailybonus"))
# ЁЯОБ Daily Bonus ржмрж╛ржЯржи рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ (рж╕ржарж┐ржХржнрж╛ржмрзЗ ржмрж╕рж╛ржирзЛ)
@dp.message(lambda message: message.text == "ЁЯОБ Daily Bonus")
async def daily_bonus_button(message: types.Message):
    await daily_bonus(message)  # тЬЕ ржЖржЧрзЗрж░ daily_bonus ржлрж╛ржВрж╢ржи ржХрж▓

@dp.message(lambda message: message.text == "ЁЯОБ Daily Bonus")
async def daily_bonus(message: types.Message):
    user_id = message.from_user.id
    current_time = time.time()

    # ржкрзНрж░ржержоржмрж╛рж░ ржмрзЛржирж╛рж╕ ржирзЗржУрзЯрж╛рж░ ржЪрзЗржХ
    if user_id not in last_bonus_claim:
        last_bonus_claim[user_id] = 0

    # ржЪрзЗржХ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ ржЗржЙржЬрж╛рж░ рж╢рзЗрж╖ ржХржмрзЗ ржмрзЛржирж╛рж╕ ржирж┐рзЯрзЗржЫрзЗ (рзирзк ржШржгрзНржЯрж╛ ржкрж╛рж░ рж╣рзЯрзЗржЫрзЗ ржХрж┐ ржирж╛)
    if current_time - last_bonus_claim[user_id] < 86400:
        await message.answer("тЭМ ржЖржкржирж┐ ржЗрждрж┐ржоржзрзНржпрзЗ ржЖржЬржХрзЗрж░ ржмрзЛржирж╛рж╕ ржЧрзНрж░рж╣ржг ржХрж░рзЗржЫрзЗржиред ржХрж╛рж▓ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи!")
    else:
        add_coins(user_id, BONUS_AMOUNT)
        last_bonus_claim[user_id] = current_time  # ржирждрзБржи рж╕ржорзЯ рж╕рзНржЯрзЛрж░
        await message.answer(f"ЁЯОБ ржЖржкржирж┐ {BONUS_AMOUNT} Coins ржлрзНрж░рж┐ ржкрзЗрзЯрзЗржЫрзЗржи!\nЁЯТ░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рж╛ржирзНрж╕: {get_balance(user_id)} Coins")

# ЁЯОб **Spin & Win рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░**
@dp.message(lambda message: message.text == "ЁЯОб Spin & Win")
async def spin_win(message: types.Message):
    reward = random.choice(SPIN_REWARDS)
    if "Coins" in reward:
        coins = int(reward.split()[0])  # рж╕ржВржЦрзНржпрж╛ржЯрж╛ ржмрзЗрж░ ржХрж░рзЗ
        add_coins(message.from_user.id, coins)
    await message.answer(f"ЁЯОб Spinning...\nCongratulations! You won: {reward}")

# ЁЯОл **Scratch & Win рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░**
@dp.message(lambda message: message.text == "ЁЯОл Scratch & Win")
async def scratch_win(message: types.Message):
    reward = random.choice(SCRATCH_REWARDS)
    if "Coins" in reward:
        coins = int(reward.split()[0])  # рж╕ржВржЦрзНржпрж╛ржЯрж╛ ржмрзЗрж░ ржХрж░рзЗ
        add_coins(message.from_user.id, coins)
    await message.answer(f"ЁЯОл Scratching...\nYou got: {reward}")

# ЁЯТ░ **Check Balance рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░**
@dp.message(lambda message: message.text == "ЁЯТ░ Check Balance")
@dp.message(Command("balance"))
async def check_balance(message: types.Message):
    balance = get_balance(message.from_user.id)
    await message.answer(f"ЁЯТ░ Your current balance: {balance} Coins")

# ЁЯФе **ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рж╛**
async def main():
    logging.basicConfig(level=logging.INFO)
    print("ЁЯдЦ Bot is running...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
from flask import Flask

app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is running!"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
